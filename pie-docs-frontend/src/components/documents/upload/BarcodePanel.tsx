import React, { useState, useEffect } from 'react';
import { useTheme } from '@/contexts/ThemeContext';
import BarcodeSelector from './BarcodeSelector';
import {
  CheckIcon,
  QrCodeIcon,
  ExclamationTriangleIcon,
  SparklesIcon,
  ArrowPathIcon,
  MagnifyingGlassIcon
} from '@heroicons/react/24/outline';
import { autoBarcodeService } from '@/services/api/autoBarcodeService';

interface FileWithPreview {
  id: string;
  file: File;
  barcodeId?: string;
  barcodeCode?: string;
  barcodeAutoGenerated?: boolean;
  documentTypeName?: string;
}

interface BarcodePanelProps {
  file: FileWithPreview | null;
  onBarcodeSelect: (barcodeId: string, barcodeCode: string, autoGenerated?: boolean) => void;
  allFiles: FileWithPreview[];
}

export const BarcodePanel: React.FC<BarcodePanelProps> = ({
  file,
  onBarcodeSelect,
  allFiles
}) => {
  const { theme } = useTheme();
  const [isGenerating, setIsGenerating] = useState(false);
  const [showManualSelect, setShowManualSelect] = useState(false);

  // Auto-generate barcode when file is selected and doesn't have one
  useEffect(() => {
    if (file && !file.barcodeId && !isGenerating) {
      handleAutoGenerate();
    }
  }, [file?.id]);

  if (!file) {
    return (
      <div className="flex flex-col h-full">
        <div className="text-center p-8">
          <QrCodeIcon className="mx-auto h-12 w-12 text-gray-600 mb-4" />
          <p className="text-gray-400 text-sm">
            Select a file to assign barcode
          </p>
        </div>
      </div>
    );
  }

  const handleAutoGenerate = async () => {
    setIsGenerating(true);
    try {
      const result = await autoBarcodeService.generateAndCreateBarcode(
        file.file.name,
        file.documentTypeName
      );

      if (result.success && result.barcode) {
        console.log(`✅ Auto-generated barcode: ${result.barcode.code}`);
        onBarcodeSelect(result.barcode.id, result.barcode.code, true);
      } else {
        console.warn(`⚠️ Failed to generate barcode: ${result.error || 'Unknown error'}`);
        // UI will show the failed state automatically
      }
    } catch (error) {
      console.error('❌ Auto-generation error:', error);
      // UI will show the failed state automatically
    } finally {
      setIsGenerating(false);
    }
  };

  const handleRegenerate = async () => {
    await handleAutoGenerate();
  };

  const getProgress = () => {
    const total = allFiles.length;
    const assigned = allFiles.filter(f => f.barcodeId).length;
    const autoGenerated = allFiles.filter(f => f.barcodeAutoGenerated).length;
    return { total, assigned, pending: total - assigned, autoGenerated };
  };

  const progress = getProgress();

  return (
    <div className="flex flex-col h-full">
      {/* Header */}
      <div className="mb-4">
        <div className="flex items-center gap-3 mb-2">
          <div className={`p-2 rounded-lg ${
            file.barcodeId ? 'bg-green-100' : 'bg-blue-100'
          }`}>
            {file.barcodeId ? (
              <CheckIcon className="h-6 w-6 text-green-600" />
            ) : (
              <QrCodeIcon className="h-6 w-6 text-blue-600" />
            )}
          </div>
          <div>
            <h3 className="text-lg font-bold text-white">
              Barcode Assignment
            </h3>
            <p className="text-xs text-gray-400">
              Link physical documents to digital records
            </p>
          </div>
        </div>

        {/* Progress Summary */}
        <div className="mt-3 bg-gray-800 rounded-lg p-3">
          <div className="flex items-center justify-between text-xs mb-2">
            <span className="text-gray-300 font-medium">Overall Progress</span>
            <span className="text-gray-400">
              {progress.assigned} / {progress.total}
            </span>
          </div>
          <div className="w-full bg-gray-700 rounded-full h-2 mb-2">
            <div
              className="bg-blue-500 h-2 rounded-full transition-all duration-300"
              style={{ width: `${(progress.assigned / progress.total) * 100}%` }}
            />
          </div>
          <div className="flex gap-3 text-xs">
            {progress.assigned > 0 && (
              <div className="flex items-center text-green-400">
                <CheckIcon className="h-3 w-3 mr-1" />
                <span>{progress.assigned} Assigned</span>
              </div>
            )}
            {progress.pending > 0 && (
              <div className="flex items-center text-gray-400">
                <ExclamationTriangleIcon className="h-3 w-3 mr-1" />
                <span>{progress.pending} Pending</span>
              </div>
            )}
          </div>
        </div>

        {/* Info Banner */}
        <div className="mt-3 bg-blue-900/20 border border-blue-500 rounded-lg p-3">
          <p className="text-xs text-blue-300">
            <span className="font-semibold">Physical Tracking:</span> Barcodes help you locate the physical document in your archive. Each document should have a unique barcode.
          </p>
        </div>
      </div>

      {/* Current File Status */}
      <div className="mb-4">
        {file.barcodeId ? (
          <div className="bg-green-900/20 border border-green-500 rounded-lg p-4">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-2">
                <CheckIcon className="h-5 w-5 text-green-500" />
                <span className="text-sm font-medium text-green-400">Barcode Assigned</span>
              </div>
              {file.barcodeAutoGenerated && (
                <span className="inline-flex items-center text-xs px-2 py-1 bg-blue-500/20 text-blue-300 rounded-full">
                  <SparklesIcon className="h-3 w-3 mr-1" />
                  Auto-Generated
                </span>
              )}
            </div>
            <div className="mt-3">
              <p className="text-xs text-gray-400 mb-1">Barcode Code:</p>
              <p className="text-lg font-mono font-bold text-white">{file.barcodeCode || file.barcodeId}</p>
            </div>
            <p className="text-xs text-green-300 mt-2">
              This barcode will be linked to the document in the database.
            </p>

            {/* Action Buttons */}
            <div className="flex gap-2 mt-4">
              <button
                onClick={handleRegenerate}
                disabled={isGenerating}
                className="flex-1 inline-flex items-center justify-center px-3 py-2 text-xs font-medium text-blue-300 bg-blue-900/30 hover:bg-blue-900/50 rounded-md transition-colors disabled:opacity-50"
              >
                <ArrowPathIcon className={`h-4 w-4 mr-1 ${isGenerating ? 'animate-spin' : ''}`} />
                {isGenerating ? 'Generating...' : 'Regenerate'}
              </button>
              <button
                onClick={() => setShowManualSelect(!showManualSelect)}
                className="flex-1 inline-flex items-center justify-center px-3 py-2 text-xs font-medium text-gray-300 bg-gray-700 hover:bg-gray-600 rounded-md transition-colors"
              >
                <MagnifyingGlassIcon className="h-4 w-4 mr-1" />
                {showManualSelect ? 'Hide Selector' : 'Choose Different'}
              </button>
            </div>
          </div>
        ) : isGenerating ? (
          <div className="bg-blue-900/20 border border-blue-500 rounded-lg p-4">
            <div className="flex items-center gap-2 mb-2">
              <ArrowPathIcon className="h-5 w-5 text-blue-400 animate-spin" />
              <span className="text-sm font-medium text-blue-400">Auto-Generating Barcode</span>
            </div>
            <p className="text-xs text-blue-300">
              System is creating a unique barcode for this document...
            </p>
          </div>
        ) : (
          <div className="bg-yellow-900/20 border border-yellow-500 rounded-lg p-4">
            <div className="flex items-center gap-2 mb-2">
              <ExclamationTriangleIcon className="h-5 w-5 text-yellow-400" />
              <span className="text-sm font-medium text-yellow-400">Auto-Generation Failed</span>
            </div>
            <p className="text-xs text-yellow-300 mb-4">
              Unable to auto-generate barcode. You can try again or select an existing one.
            </p>
            <div className="flex gap-2">
              <button
                onClick={handleAutoGenerate}
                className="flex-1 inline-flex items-center justify-center px-3 py-2 text-xs font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md transition-colors"
              >
                <SparklesIcon className="h-4 w-4 mr-1" />
                Try Again
              </button>
              <button
                onClick={() => setShowManualSelect(!showManualSelect)}
                className="flex-1 inline-flex items-center justify-center px-3 py-2 text-xs font-medium text-gray-300 bg-gray-700 hover:bg-gray-600 rounded-md transition-colors"
              >
                <MagnifyingGlassIcon className="h-4 w-4 mr-1" />
                Select Manual
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Barcode Selector - Conditionally shown */}
      {showManualSelect && (
        <div className="flex-1 overflow-y-auto pr-2">
          <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
            <h4 className="text-sm font-medium text-white mb-3">Manual Selection</h4>
            <BarcodeSelector
              selectedBarcodeId={file.barcodeId}
              onBarcodeSelect={(id, code) => {
                onBarcodeSelect(id, code, false);
                setShowManualSelect(false);
              }}
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default BarcodePanel;
